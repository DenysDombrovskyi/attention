import streamlit as st
import pandas as pd
import io

# -------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# -------------------
st.set_page_config(page_title="Attention Split Calculator", layout="wide")

st.title("üéØ Attention Split Calculator")
st.markdown("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ **–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤** —Ç–∞ –ø–æ–±—É–¥–æ–≤–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ üìä **—Å–ø–ª—ñ—Ç—É –±—é–¥–∂–µ—Ç—É**.")

# -------------------
# –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
# -------------------
num_tools = st.slider("üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤", 1, 20, 2)

# –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –º–µ–¥—ñ–∞
screen_coef = {"–¢–ë": 1.0, "–ü–ö": 0.71, "–ú–æ–±–∞–π–ª": 0.42, "–ê—É–¥—ñ–æ": 0.2}

data = []
tool_names = []

st.markdown("---")

for i in range(num_tools):
    with st.container():
        # –î–æ–¥–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        tool_name = st.text_input(f"–ù–∞–∑–≤–∞ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É {i+1}", f"–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i+1}", key=f"tool_name_{i}")
        tool_names.append(tool_name)

        st.subheader(f"{tool_name}")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            budget = st.number_input(f"–ë—é–¥–∂–µ—Ç {tool_name} ($)", min_value=0.0, step=100.0, key=f"budget_{tool_name}")
            cpm = st.number_input(f"CPM {tool_name} ($)", min_value=0.0, step=0.1, key=f"cpm_{tool_name}")
        
        st.markdown("**–ß–∞—Å—Ç–∫–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏**")
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            share_tv = st.slider(f"–ß–∞—Å—Ç–∫–∞ –¢–í {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_tv_{tool_name}")
        with c2:
            share_mobile = st.slider(f"–ß–∞—Å—Ç–∫–∞ –º–æ–±–∞–π–ª—É {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_mobile_{tool_name}")
        with c3:
            share_pc = st.slider(f"–ß–∞—Å—Ç–∫–∞ –ü–ö {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_pc_{tool_name}")
        with c4:
            share_audio = st.slider(f"–ß–∞—Å—Ç–∫–∞ –∞—É–¥—ñ–æ {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_audio_{tool_name}")

        viewability = st.slider(f"Viewability {tool_name}", 0.0, 1.0, 0.7, step=0.01, key=f"view_{tool_name}")
        creative_time = st.number_input(f"–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤ (—Å–µ–∫) {tool_name}", min_value=0, step=5, key=f"time_{tool_name}")

        st.markdown("**üé• VTR (Video Through Rate)**")
        d1, d2, d3, d4 = st.columns(4)
        with d1:
            vtr25 = st.slider(f"VTR 25% {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"vtr25_{tool_name}")
        with d2:
            vtr50 = st.slider(f"VTR 50% {tool_name}", 0.0, 1.0, 0.15, step=0.01, key=f"vtr50_{tool_name}")
        with d3:
            vtr75 = st.slider(f"VTR 75% {tool_name}", 0.0, 1.0, 0.10, step=0.01, key=f"vtr75_{tool_name}")
        with d4:
            vtr100 = st.slider(f"VTR 100% {tool_name}", 0.0, 1.0, 0.05, step=0.01, key=f"vtr100_{tool_name}")

        # -------------------
        # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        # -------------------
        impressions = (budget / cpm * 1000) if cpm > 0 else 0
        viewed_impressions = impressions * viewability

        total_screen_coeff = (share_tv * screen_coef["–¢–ë"] +
                             share_mobile * screen_coef["–ú–æ–±–∞–π–ª"] +
                             share_pc * screen_coef["–ü–ö"] +
                             share_audio * screen_coef["–ê—É–¥—ñ–æ"])
        
        target_impressions = viewed_impressions * total_screen_coeff

        avg_time_viewed = (vtr25*0.25 + vtr50*0.5 + vtr75*0.75 + vtr100*1.0) * creative_time
        APM = target_impressions * avg_time_viewed / 1000 if creative_time > 0 else 0
        ACPM = budget / APM if APM > 0 else 0

        data.append([
            tool_name, budget, cpm, impressions, viewed_impressions,
            share_tv, share_mobile, share_pc, share_audio,
            APM, ACPM
        ])

st.markdown("---")

# -------------------
# –¢–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
# -------------------
df = pd.DataFrame(data, columns=[
    "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ë—é–¥–∂–µ—Ç", "CPM", "Impressions", "Viewed Impressions",
    "–ß–∞—Å—Ç–∫–∞ –¢–í", "–ß–∞—Å—Ç–∫–∞ –ú–æ–±–∞–π–ª—É", "–ß–∞—Å—Ç–∫–∞ –ü–ö", "–ß–∞—Å—Ç–∫–∞ –ê—É–¥—ñ–æ",
    "APM", "ACPM"
])

st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤")
st.dataframe(df.style.format({
    "–ë—é–¥–∂–µ—Ç": "{:,.0f} $",
    "CPM": "{:,.2f} $",
    "Impressions": "{:,.0f}",
    "Viewed Impressions": "{:,.0f}",
    "–ß–∞—Å—Ç–∫–∞ –¢–í": "{:.2f}",
    "–ß–∞—Å—Ç–∫–∞ –ú–æ–±–∞–π–ª—É": "{:.2f}",
    "–ß–∞—Å—Ç–∫–∞ –ü–ö": "{:.2f}",
    "–ß–∞—Å—Ç–∫–∞ –ê—É–¥—ñ–æ": "{:.2f}",
    "APM": "{:,.2f}",
    "ACPM": "{:,.2f} $"
}))

# -------------------
# –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –±—é–¥–∂–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ ACPM
# -------------------
split_df = None
if not df.empty and df["–ë—é–¥–∂–µ—Ç"].sum() > 0:
    df_temp = df.copy()
    
    df_temp['ACPM_safe'] = df_temp['ACPM'].replace(0, float('inf'))
    df_temp['efficiency_score'] = 1 / df_temp['ACPM_safe']
    
    total_efficiency_score = df_temp['efficiency_score'].sum()
    
    if total_efficiency_score > 0:
        df_temp['–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)'] = (df_temp['efficiency_score'] / total_efficiency_score) * 100
    else:
        df_temp['–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)'] = 0

    df_sorted = df_temp.sort_values("–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)", ascending=False)

    split_df = pd.DataFrame({
        "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç": df_sorted["–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"],
        "–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)": df_sorted["–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)"]
    })

    st.subheader("üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –±—é–¥–∂–µ—Ç—É")
    st.dataframe(split_df.style.format({"–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)": "{:.2f} %"}))

    st.bar_chart(split_df.set_index("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")["–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)"])

# -------------------
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Excel
# -------------------
st.markdown("---")

def to_excel(df_results, df_split):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_results.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç–∏', index=False)
        if df_split is not None:
            df_split.to_excel(writer, sheet_name='–°–ø–ª—ñ—Ç', index=False)
    processed_data = output.getvalue()
    return processed_data

if not df.empty and df["–ë—é–¥–∂–µ—Ç"].sum() > 0:
    excel_data = to_excel(df, split_df)
    st.download_button(
        label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ Excel ‚¨áÔ∏è",
        data=excel_data,
        file_name='attention_split_results.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

