import streamlit as st
import pandas as pd
import io
from scipy.optimize import linprog

# -------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# -------------------
st.set_page_config(page_title="Attention Split Calculator", layout="wide")

st.title("üéØ Attention Split Calculator")
st.markdown("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ **–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤** —Ç–∞ –ø–æ–±—É–¥–æ–≤–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ üìä **—Å–ø–ª—ñ—Ç—É –±—é–¥–∂–µ—Ç—É**.")

# -------------------
# –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
# -------------------
num_tools = st.slider("üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤", 1, 20, 2)

# –í–∏–±—ñ—Ä –º–µ—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
optimization_target = st.radio(
    "–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:",
    ("–ú—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ ACPM", "–ú—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ ACPM (–∑ —è–∫—ñ—Å—Ç—é)")
)

# –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –º–µ–¥—ñ–∞
screen_coef = {"–¢–ë": 1.0, "–ü–ö": 0.71, "–ú–æ–±–∞–π–ª": 0.42, "–ê—É–¥—ñ–æ": 0.2}

data = []
input_budgets = []

st.markdown("---")

for i in range(num_tools):
    with st.container():
        tool_name = st.text_input(f"–ù–∞–∑–≤–∞ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É {i+1}", f"–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i+1}", key=f"tool_name_{i}")
        st.subheader(f"{tool_name}")

        col1, col2 = st.columns(2)
        with col1:
            budget = st.number_input(f"–ë—é–¥–∂–µ—Ç {tool_name} ($)", min_value=0.0, step=100.0, key=f"budget_{tool_name}")
            cpm = st.number_input(f"CPM {tool_name} ($)", min_value=0.0, step=0.1, key=f"cpm_{tool_name}")
            input_budgets.append(budget)
            
        with col2:
            quality_tool_coeff = st.slider(f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —è–∫–æ—Å—Ç—ñ {tool_name}", 0.0, 1.0, 1.0, step=0.01, key=f"quality_tool_{tool_name}")
        
        st.markdown("**–ß–∞—Å—Ç–∫–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏**")
        c1, c2, c3, c4 = st.columns(4)
        with c1:
            share_tv = st.slider(f"–ß–∞—Å—Ç–∫–∞ –¢–í {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_tv_{tool_name}")
        with c2:
            share_mobile = st.slider(f"–ß–∞—Å—Ç–∫–∞ –º–æ–±–∞–π–ª—É {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_mobile_{tool_name}")
        with c3:
            share_pc = st.slider(f"–ß–∞—Å—Ç–∫–∞ –ü–ö {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_pc_{tool_name}")
        with c4:
            share_audio = st.slider(f"–ß–∞—Å—Ç–∫–∞ –∞—É–¥—ñ–æ {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"share_audio_{tool_name}")

        col_new1, col_new2 = st.columns(2)
        with col_new1:
            viewability = st.slider(f"Viewability {tool_name}", 0.0, 1.0, 0.7, step=0.01, key=f"view_{tool_name}")
        with col_new2:
            ta_reach = st.slider(f"–ü–æ—Ç—Ä–∞–ø–ª—è–Ω–Ω—è –≤ –¶–ê {tool_name}", 0.0, 1.0, 1.0, step=0.01, key=f"ta_reach_{tool_name}")
            
        creative_time = st.number_input(f"–•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤ (—Å–µ–∫) {tool_name}", min_value=0, step=5, key=f"time_{tool_name}")

        st.markdown("**üé• VTR (Video Through Rate)**")
        d1, d2, d3, d4 = st.columns(4)
        with d1:
            vtr25 = st.slider(f"VTR 25% {tool_name}", 0.0, 1.0, 0.25, step=0.01, key=f"vtr25_{tool_name}")
        with d2:
            vtr50 = st.slider(f"VTR 50% {tool_name}", 0.0, 1.0, 0.15, step=0.01, key=f"vtr50_{tool_name}")
        with d3:
            vtr75 = st.slider(f"VTR 75% {tool_name}", 0.0, 1.0, 0.10, step=0.01, key=f"vtr75_{tool_name}")
        with d4:
            vtr100 = st.slider(f"VTR 100% {tool_name}", 0.0, 1.0, 0.05, step=0.01, key=f"vtr100_{tool_name}")

        # -------------------
        # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        # -------------------
        impressions = (budget / cpm * 1000) if cpm > 0 else 0
        viewed_impressions = impressions * viewability
        targeted_impressions = viewed_impressions * ta_reach

        total_screen_coeff = (share_tv * screen_coef["–¢–ë"] +
                             share_mobile * screen_coef["–ú–æ–±–∞–π–ª"] +
                             share_pc * screen_coef["–ü–ö"] +
                             share_audio * screen_coef["–ê—É–¥—ñ–æ"])
        
        target_impressions = targeted_impressions * total_screen_coeff

        avg_time_viewed = (vtr25*0.25 + vtr50*0.5 + vtr75*0.75 + vtr100*1.0) * creative_time
        
        APM = target_impressions * avg_time_viewed / 1000 if creative_time > 0 else 0
        ACPM = budget / APM if APM > 0 else 0
        
        APM_wq = APM * quality_tool_coeff
        ACPM_wq = budget / APM_wq if APM_wq > 0 else 0

        data.append([
            tool_name, budget, cpm, impressions, viewed_impressions, targeted_impressions,
            share_tv, share_mobile, share_pc, share_audio,
            APM, ACPM, APM_wq, ACPM_wq, quality_tool_coeff, avg_time_viewed
        ])

st.markdown("---")

# -------------------
# –¢–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç—É
# -------------------
df = pd.DataFrame(data, columns=[
    "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–ë—é–¥–∂–µ—Ç", "CPM", "Impressions", "Viewed Impressions", "Targeted Impressions",
    "–ß–∞—Å—Ç–∫–∞ –¢–í", "–ß–∞—Å—Ç–∫–∞ –ú–æ–±–∞–π–ª—É", "–ß–∞—Å—Ç–∫–∞ –ü–ö", "–ß–∞—Å—Ç–∫–∞ –ê—É–¥—ñ–æ",
    "APM", "ACPM", "APM (–∑ —è–∫—ñ—Å—Ç—é)", "ACPM (–∑ —è–∫—ñ—Å—Ç—é)", "–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —è–∫–æ—Å—Ç—ñ", "–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É (—Å–µ–∫)"
])

st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ —Å–ø–ª—ñ—Ç—É")
st.dataframe(df.style.format({
    "–ë—é–¥–∂–µ—Ç": "{:,.0f} $",
    "CPM": "{:,.2f} $",
    "Impressions": "{:,.0f}",
    "Viewed Impressions": "{:,.0f}",
    "Targeted Impressions": "{:,.0f}",
    "–ß–∞—Å—Ç–∫–∞ –¢–í": "{:.2f}",
    "–ß–∞—Å—Ç–∫–∞ –ú–æ–±–∞–π–ª—É": "{:.2f}",
    "–ß–∞—Å—Ç–∫–∞ –ü–ö": "{:.2f}",
    "–ß–∞—Å—Ç–∫–∞ –ê—É–¥—ñ–æ": "{:.2f}",
    "APM": "{:,.2f}",
    "ACPM": "{:,.2f} $",
    "APM (–∑ —è–∫—ñ—Å—Ç—é)": "{:,.2f}",
    "ACPM (–∑ —è–∫—ñ—Å—Ç—é)": "{:,.2f} $",
    "–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É (—Å–µ–∫)": "{:,.2f}"
}))

total_input_budget = sum(input_budgets)

# -------------------
# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
# -------------------
st.markdown("---")
st.subheader("üìà –¢–æ—Ç–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∫–∞–º–ø–∞–Ω—ñ—ó")

if total_input_budget > 0:
    total_apm = df['APM'].sum()
    total_acpm = total_input_budget / total_apm if total_apm > 0 else 0

    total_apm_wq = df['APM (–∑ —è–∫—ñ—Å—Ç—é)'].sum()
    total_acpm_wq = total_input_budget / total_apm_wq if total_apm_wq > 0 else 0
    
    # –°–µ—Ä–µ–¥–Ω—å–æ–∑–≤–∞–∂–µ–Ω–∏–π —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É
    weighted_avg_time = (df['–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É (—Å–µ–∫)'] * df['–ë—é–¥–∂–µ—Ç']).sum() / total_input_budget
    
    total_metrics_data = {
        "–ü–æ–∫–∞–∑–Ω–∏–∫": ["–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", "–ó–∞–≥–∞–ª—å–Ω–∏–π APM", "–ó–∞–≥–∞–ª—å–Ω–∏–π ACPM", "–ó–∞–≥–∞–ª—å–Ω–∏–π APM (–∑ —è–∫—ñ—Å—Ç—é)", "–ó–∞–≥–∞–ª—å–Ω–∏–π ACPM (–∑ —è–∫—ñ—Å—Ç—é)", "–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É (—Å–µ–∫)"],
        "–ó–Ω–∞—á–µ–Ω–Ω—è": [total_input_budget, total_apm, total_acpm, total_apm_wq, total_acpm_wq, weighted_avg_time]
    }
    total_metrics_df = pd.DataFrame(total_metrics_data)

    st.dataframe(total_metrics_df.style.format({
        "–ó–Ω–∞—á–µ–Ω–Ω—è": "{:,.2f}"  # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
    }))

# -------------------
# –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
# -------------------
st.markdown("---")
st.subheader("üìä –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç –±—é–¥–∂–µ—Ç—É")

if total_input_budget > 0:
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è LP
    df['APM_rate'] = df['APM'] / df['–ë—é–¥–∂–µ—Ç']
    df['APM_wq_rate'] = df['APM (–∑ —è–∫—ñ—Å—Ç—é)'] / df['–ë—é–¥–∂–µ—Ç']

    if optimization_target == "–ú—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ ACPM":
        c = -df['APM_rate'].fillna(0).values
    else:
        c = -df['APM_wq_rate'].fillna(0).values

    # –û–±–º–µ–∂–µ–Ω–Ω—è: —Å—É–º–∞ –±—é–¥–∂–µ—Ç—ñ–≤ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É
    A_eq = [[1.0] * num_tools]
    b_eq = [total_input_budget]
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è: –±—é–¥–∂–µ—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏ —Ç–∞ –º–∞—é—Ç—å –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 2%-40%
    min_budget = total_input_budget * 0.02
    max_budget = total_input_budget * 0.40
    bounds = [(min_budget, max_budget)] * num_tools
    
    # –Ø–∫—â–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤
    if min_budget * num_tools > total_input_budget:
        st.error(f"–°—É–º–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤ ({min_budget * num_tools:,.0f} $) –ø–µ—Ä–µ–≤–∏—â—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç ({total_input_budget:,.0f} $). –ó–±—ñ–ª—å—à—Ç–µ –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –∞–±–æ –∑–º–µ–Ω—à—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.")
        bounds = [(0, total_input_budget)] * num_tools

    result = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')

    if result.success:
        optimized_budgets = result.x
        
        optimized_split_df = pd.DataFrame({
            "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç": df["–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"],
            "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ë—é–¥–∂–µ—Ç ($)": optimized_budgets,
            "–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)": (optimized_budgets / total_input_budget) * 100
        })

        st.dataframe(optimized_split_df.style.format({
            "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ë—é–¥–∂–µ—Ç ($)": "{:,.0f} $",
            "–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)": "{:.2f} %"
        }))
        
        st.bar_chart(optimized_split_df.set_index("–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")["–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É (%)"])

        # -------------------
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø–ª—ñ—Ç—ñ–≤
        # -------------------
        st.markdown("---")
        st.subheader("üìà –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø–ª—ñ—Ç—ñ–≤")
        
        total_apm_input = df['APM'].sum()
        total_acpm_input = total_input_budget / total_apm_input if total_apm_input > 0 else 0

        total_apm_wq_input = df['APM (–∑ —è–∫—ñ—Å—Ç—é)'].sum()
        total_acpm_wq_input = total_input_budget / total_apm_wq_input if total_apm_wq_input > 0 else 0
        
        df_optimized = df.copy()
        df_optimized['–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ë—é–¥–∂–µ—Ç'] = optimized_budgets
        
        total_apm_optimized = (df_optimized['APM_rate'] * df_optimized['–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ë—é–¥–∂–µ—Ç']).sum()
        total_acpm_optimized = total_input_budget / total_apm_optimized if total_apm_optimized > 0 else 0
        
        total_apm_wq_optimized = (df_optimized['APM_wq_rate'] * df_optimized['–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –ë—é–¥–∂–µ—Ç']).sum()
        total_acpm_wq_optimized = total_input_budget / total_apm_wq_optimized if total_apm_wq_optimized > 0 else 0

        comparison_data = {
            "–ü–æ–∫–∞–∑–Ω–∏–∫": ["–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç ($)", "–ó–∞–≥–∞–ª—å–Ω–∏–π APM", "–ó–∞–≥–∞–ª—å–Ω–∏–π ACPM ($)", "–ó–∞–≥–∞–ª—å–Ω–∏–π APM (–∑ —è–∫—ñ—Å—Ç—é)", "–ó–∞–≥–∞–ª—å–Ω–∏–π ACPM (–∑ —è–∫—ñ—Å—Ç—é)"],
            "–í–∞—à —Å–ø–ª—ñ—Ç": [total_input_budget, total_apm_input, total_acpm_input, total_apm_wq_input, total_acpm_wq_input],
            "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç": [total_input_budget, total_apm_optimized, total_acpm_optimized, total_apm_wq_optimized, total_acpm_wq_optimized]
        }
        comparison_df = pd.DataFrame(comparison_data)

        st.dataframe(comparison_df.style.format(
            formatter={
                "–í–∞—à —Å–ø–ª—ñ—Ç": lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x >= 1000 else f"{x:,.2f}",
                "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç": lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x >= 1000 else f"{x:,.2f}"
            }
        ))
        
        # -------------------
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Excel
        # -------------------
        st.markdown("---")
        
        def to_excel(df_results, df_split_opt, df_comp, df_total_metrics):
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_results.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç–∏', index=False)
                df_split_opt.to_excel(writer, sheet_name='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', index=False)
                df_comp.to_excel(writer, sheet_name='–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è', index=False)
                df_total_metrics.to_excel(writer, sheet_name='–¢–æ—Ç–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏', index=False)
            processed_data = output.getvalue()
            return processed_data

        excel_data = to_excel(df, optimized_split_df, comparison_df, total_metrics_df)
        st.download_button(
            label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ Excel ‚¨áÔ∏è",
            data=excel_data,
            file_name='attention_split_results.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    else:
        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Å—É–º–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç. ")
else:
    st.warning("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç, —â–æ–± —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç.")
